##################################################
# author: elovi                                  #
# time: 2021-04-16                               #
##################################################

rowHeight = 85
colWidth = 80
delayMustFallen = 450
isRoof = False

windPaoDist = [[125, 124, 84], [125, 125, 102], [125, 125, 114], [125, 125, 121], [124, 125, 124], [124, 125, 124], [121, 125, 125], [118, 125, 125]]

def scene(pscene, oppress=False):
    global rowHeight
    global isRoof
    if pscene == "PE" or pscene == "FE":
        rowHeight = 85
        isRoof = False
        if not oppress:
            print("已设置场地为六行")
    elif pscene == "DE" or pscene == "NE":
        rowHeight = 100
        isRoof = False
        if not oppress:
            print("已设置场地为五行")
    elif pscene == "RE" or pscene == "ME":
        rowHeight = 85
        if not oppress:
            print("已设置场地为天台")
        isRoof = True
    else:
        if not oppress:
            print("该场地不支持。")


def IntersectCircRect(cirX, cirY, radius, rectX, rectY, rectW, rectH):
    X = rectX if cirX < rectX else (
        rectX + rectW if cirX > rectX + rectW else cirX)
    Y = rectY if cirY < rectY else (
        rectY + rectH if cirY > rectY + rectH else cirY)
    return ((cirX - X) ** 2 + (cirY - Y) ** 2) <= radius ** 2


def calcImp(xg, yg, rnd, dl, stackHigher=False, isIced=False, verbosity=1):
    if isRoof:
        return calcRoofImp(xg, yg, rnd, dl, stackHigher, isIced, verbosity)
    if (xg < 401) or (rnd != 0 and xg < 501):
        if verbosity >= 1:
            print("Invalid paramters.")
        return -1, -1, True, (-1)
    alreadyEat, earliestEatTime, damage = False, -1, 0
    earliestIceTime = -1
    eatLoop = 4 if not isIced else 8
    time = 105 if not isIced else 210
    if time > dl:
        if verbosity >= 2:
            print("Too early.")
        return -1, -1, True, (-1)
    g, vx, vy, x, y, h, state, existTime = -0.05, - \
        3, (xg - 360 - rnd)/120, xg - 133, yg, 88, 71, 0
    if stackHigher:
        vy += g
        x, h, existTime = x + vx, h + vy, existTime + 1
    while time < dl:
        if state == 71:
            vy += g
            x, h, existTime = x + vx, h + vy, existTime + 1
            time += 1
            if int(h) < 0:
                state = 72
                h = 0
                countDown = 25 if not isIced else 50
        elif state == 72:
            countDown -= 1
            existTime += 1
            time += 1
            if countDown == 0:
                state = 0
                alreadyEat = (existTime % eatLoop == 0)
                if alreadyEat:
                    earliestEatTime = time
        elif state == 0:
            existTime += 1
            time += 1
            if earliestIceTime == -1:
                earliestIceTime = time
            if existTime % eatLoop == 0:
                if not alreadyEat:
                    alreadyEat = True
                    earliestEatTime = time
                if alreadyEat:
                    damage = (time - earliestEatTime)/eatLoop * 4 + 4
                if damage >= 300:
                    if verbosity >= 2:
                        print("Damage too large.")
                    break
        else:
            if verbosity >= 1:
                print("Unexpected Error.")
            return -1, -1, True, (-1)
    return int(x), int(y - h), alreadyEat, (earliestEatTime, damage, earliestIceTime, h, eatLoop)


def calcRoofImp(xg, yg, rnd, dl, stackHigher=False, isIced=False, verbosity=1):
    if (xg < 401) or (rnd != 0 and xg < 501):
        if verbosity >= 1:
            print("Invalid paramters.")
        return -1, -1, True, (-1)
    alreadyEat, earliestEatTime, damage = False, -1, 0
    earliestIceTime = -1
    eatLoop = 4 if not isIced else 8
    time = 105 if not isIced else 210
    if time > dl:
        if verbosity >= 2:
            print("Too early.")
        return -1, -1, True, (-1)
    g, vx, vy, x, y, h, state, existTime = -0.05, - \
        3, (xg - 360 - 180 - rnd)/120, xg - 133, yg, 88, 71, 0
    if stackHigher:
        vy += g
        x, h, existTime = x + vx, h + vy, existTime + 1
        yshift = 0 if x >= 400 else (400 - x) / 4
        real_h = h + yshift
    while time < dl:
        if state == 71:
            vy += g
            x, h, existTime = x + vx, h + vy, existTime + 1
            yshift = 0 if x >= 400 else (400 - x) / 4
            real_h = h + yshift
            time += 1
            if int(real_h) < 0:
                state = 72
                h = 0
                real_h = 0
                countDown = 25 if not isIced else 50
        elif state == 72:
            countDown -= 1
            existTime += 1
            time += 1
            if countDown == 0:
                state = 0
                alreadyEat = (existTime % eatLoop == 0)
                if alreadyEat:
                    earliestEatTime = time
        elif state == 0:
            existTime += 1
            time += 1
            if earliestIceTime == -1:
                earliestIceTime = time
            if existTime % eatLoop == 0:
                if not alreadyEat:
                    alreadyEat = True
                    earliestEatTime = time
                if alreadyEat:
                    damage = (time - earliestEatTime)/eatLoop * 4 + 4
                if damage >= 300:
                    if verbosity >= 2:
                        print("Damage too large.")
                    break
        else:
            if verbosity >= 1:
                print("Unexpected Error.")
            return -1, -1, True, (-1)
    shift = 0 if x >= 400 else (400 - x)/4.0
    return int(x), int(y + shift - real_h), alreadyEat, (earliestEatTime, damage, earliestIceTime, real_h, eatLoop)


def doom(row, col):
    return col * colWidth, 120 + (row-1) * rowHeight, 250


def cob(row, col, paoCol=None, paoRow=None):
    x = int(col * colWidth)
    targetX = (x - 7) if (x >= 7) else x - 6
    if not isRoof:
        return targetX, 120 + (row-1) * rowHeight, 115
    else:
        if paoCol is None:
            print("屋顶场地需指定炮尾所在列.")
            return 0, 0, 0
        y = 209 + (row - 1) * rowHeight
        if x <= 206:
            step1 = 0
        elif x >= 527:
            step1 = 5
        else:
            step1 = (x - 127) // 80
        y -= step1 * 20
        if paoCol == 1:
            leftEdge = 87
            rightEdge = 524
            step2Shift = 0
        elif paoCol >= 7:
            leftEdge = 510
            rightEdge = 523
            step2Shift = 5
        else:
            leftEdge = 80 * paoCol - 13
            rightEdge = 524
            step2Shift = 5
        if x <= leftEdge:
            step2 = 0
        elif x >= rightEdge:
            step2 = (rightEdge - leftEdge + 3) // 4 - step2Shift
        else:
            step2 = (x - leftEdge + 3) // 4 - step2Shift
        y -= step2
        if (x == leftEdge) and (paoCol in (2, 3, 4, 5, 6)):
            if paoRow is None:
                print("特殊落点，需要指定炮所在行.")
                return 0, 0, 0
            if paoRow in (3, 4, 5):
                y += 5
            if paoRow == 3 and paoCol == 6:
                y -= 5
        y = 0 if y < 0 else y
        return targetX, y, 115


def judge(xgInfo, dl, rows, explodeInfo, isIced=False, verbosity=1):
    count = 0
    eatCount = 0
    notInterceptCount = 0
    totalDamage = 0
    if isinstance(xgInfo, list):
        if len(xgInfo) > 1:
            xgFast, xgSlow = xgInfo
        else:
            xgFast, xgSlow = xgInfo[0], xgInfo[0]
    else:
        xgFast, xgSlow = xgInfo, xgInfo
    explodeX, explodeY, radius = explodeInfo
    for xg in range(xgFast, xgSlow+1):
        if xg <= 400:
            continue
        for rnd in range(0, 101):
            if 401 <= xg <= 500 and rnd != 0:
                continue
            for stackHeight in [True, False]:
                for row in rows:
                    count += 1
                    impX, impY, eat, _ = calcImp(
                        xg, (50 if not isRoof else 40) + (row-1) * rowHeight, rnd, dl, stackHeight, isIced, verbosity)
                    if eat:
                        eatCount += 1
                        totalDamage += _[1]
                        if (verbosity == 1 and eatCount <= 5) or verbosity >= 2:
                            print("Eat: ", end="")
                            print([xg, rnd, dl, stackHeight,
                                  row, impX, impY, eat, _])
                        elif verbosity == 1 and eatCount == 6:
                            print("...")
                    if not IntersectCircRect(explodeX, explodeY, radius, impX + 36, impY, 42, 115):
                        notInterceptCount += 1
                        if (verbosity == 1 and notInterceptCount <= 5) or verbosity >= 2:
                            print("Not Intercepted: ", end="")
                            print([xg, rnd, dl, stackHeight,
                                  row, impX, impY, eat, _])
                        elif verbosity == 1 and notInterceptCount == 6:
                            print("...")
    if verbosity >= 1:
        print("Eat/NotIntercept/All: " + str(eatCount) + "/" + str(notInterceptCount) +
              "/" + str(count) + "; AvgDamage: " + str(totalDamage / count))
    return notInterceptCount == 0 and eatCount == 0


def iceKill(xgInfo, rows, isIced=True, verbosity=1):
    count = 0
    xgFast, xgSlow = xgInfo
    iceTimes = []
    eatTimes = []
    for xg in range(xgFast, xgSlow+1):
        if xg <= 400:
            continue
        for rnd in range(0, 101):
            if 401 <= xg <= 500 and rnd != 0:
                continue
            for stackHeight in [True, False]:
                for row in rows:
                    count += 1
                    impX, impY, eat, _ = calcImp(
                        xg, 50 + (row-1) * rowHeight, rnd, delayMustFallen, stackHeight, isIced, verbosity)
                    assert eat
                    eatTimes.append(_[0])
                    iceTimes.append(_[2])
    earliestIceTime = max(iceTimes)
    eatLoop = 8 if isIced else 4
    totalDamage = (earliestIceTime * count - sum(eatTimes)) / \
        eatLoop * 4 + count * 4
    avgDamege = totalDamage / count
    if verbosity >= 1:
        print("IceTime: " + str(earliestIceTime) + "; All:" +
              str(count) + "; AvgDamage: " + str(avgDamege))
    return earliestIceTime


def findMaxDelay(xRange, rows, pR, paoCol, isIced=False, step=5, roofPaoCol=None):
    if isRoof and roofPaoCol == None:
        print("屋顶场地需要指定炮尾所在列")
        return -1
    xgInfo = []
    if not isinstance(xRange, list):
        xgInfo.append(xRange)
    else:
        xgInfo = xRange[:2]
    xgRows = []
    if not isinstance(rows, list):
        xgRows.append(rows)
    else:
        xgRows = rows
    paoRow = 0
    if isinstance(pR, list):
        paoRow = pR[0]
    else:
        paoRow = pR
    if step <= 0:
        raise Exception()
    dl = 106 if not isIced else 211
    paoLo, paoHi = paoCol
    paoLo = int(paoLo * 80)
    paoHi = int(paoHi * 80)
    resultDelay = -1
    resultX = -1
    paoX = paoLo
    while paoX <= paoHi:
        maxDelay = -1
        start = -1
        for d in range(dl, dl + 100):
            if judge(xgInfo[0], d, xgRows, cob(paoRow, paoX/80.0, roofPaoCol), isIced, 0) and (len(xgInfo) == 1 or judge(xgInfo[1], d, xgRows, cob(paoRow, paoX/80.0, roofPaoCol), isIced, 0)):
                start = d
                break
        if start != -1:
            for d in range(start + 1, start + 100):
                if not judge(xgInfo[0], d, xgRows, cob(paoRow, paoX/80.0, roofPaoCol), isIced, 0) or (len(xgInfo) > 1 and not judge(xgInfo[1], d, xgRows, cob(paoRow, paoX/80.0, roofPaoCol), isIced, 0)):
                    maxDelay = d - 1
                    break
        if maxDelay > resultDelay:
            resultDelay = maxDelay
            resultX = paoX
        paoX += step
    print("最大延迟:", resultDelay)
    print("落点:", str(resultX/80.0)+"列")
    return resultDelay, resultX/80.0


def delay(xRange, rows, paoInfo, isIced=False, exact=False):
    xgInfo = []
    if not isinstance(xRange, list):
        xgInfo.append(xRange)
    else:
        xgInfo = xRange[:2]
    return minDelay(xgInfo, rows, paoInfo, isIced, exact), maxDelay(xgInfo, rows, paoInfo, isIced, exact)
    

def maxDelay(xRange, rows, paoInfo, isIced=False, exact=False):
    xgInfo = []
    if not isinstance(xRange, list):
        xgInfo.append(xRange)
    else:
        xgInfo = xRange[:2]
    if exact and len(xgInfo) == 1:
        xgInfo.append(xgInfo[0])
    xgRows = []
    if not isinstance(rows, list):
        xgRows.append(rows)
    else:
        xgRows = rows
    x, _, rd = paoInfo
    dl = 106 if not isIced else 211
    if x <= 400 and rd <= 115 and not exact and xgInfo[0] >= 600:
        dl += 80
    upper = dl + 200
    if rd <= 115 and not exact:
        upper = dl + 120
    found = False
    for d in range(dl, upper):
        if not exact:
            if not judge(xgInfo[0], d, xgRows, paoInfo, isIced, 0) or (len(xgInfo) > 1 and not judge(xgInfo[1], d, xgRows, paoInfo, isIced, 0)):
                if found:
                    print("最大延迟:",d - 1,"("+str(dl)+"~"+str(upper)+")")
                    return d - 1
            else:
                found = True
        else:
            if not judge([xgInfo[0], xgInfo[1]], d, xgRows, paoInfo, isIced, 0):
                if found:
                    print("最大延迟（精确）:", d - 1,"("+str(dl)+"~"+str(upper)+")")
                    return d - 1
            else:
                found = True
    if not exact:
        if not found:
            print("最大延迟: 全部失败"+" ("+str(dl)+"~"+str(upper)+")")
        else:
            print("最大延迟: 全部成功"+" ("+str(dl)+"~"+str(upper)+")")
    else:
        if not found:
            print("最大延迟（精确）: 全部失败"+" ("+str(dl)+"~"+str(upper)+")")
        else:
            print("最大延迟（精确）: 全部成功"+" ("+str(dl)+"~"+str(upper)+")")
    return dl + 99


def minDelay(xRange, rows, paoInfo, isIced=False, exact=False):
    xgInfo = []
    if not isinstance(xRange, list):
        xgInfo.append(xRange)
    else:
        xgInfo = xRange[:2]
    if exact and len(xgInfo) == 1:
        xgInfo.append(xgInfo[0])
    xgRows = []
    if not isinstance(rows, list):
        xgRows.append(rows)
    else:
        xgRows = rows
    x, _, rd = paoInfo
    dl = 106 if not isIced else 211
    if x <= 400 and rd <= 115 and not exact and xgInfo[0] >= 600:
        dl += 80
    upper = dl+200
    if rd <= 115 and not exact:
        upper = dl+100
    for d in range(dl, upper):
        if not exact:
            if judge(xgInfo[0], d, xgRows, paoInfo, isIced, 0) and (len(xgInfo) == 1 or judge(xgInfo[1], d, xgRows, paoInfo, isIced, 0)):
                print("最小延迟:",d,"("+str(dl)+"~"+str(upper)+")")
                return d
        else:
            if judge([xgInfo[0], xgInfo[1]], d, xgRows, paoInfo, isIced, 0):
                print("最小延迟（精确）:",d,"("+str(dl)+"~"+str(upper)+")")
                return d
    if not exact:
        print("最小延迟: 全部失败"+" ("+str(dl)+"~"+str(upper)+")")
    else:
        print("最小延迟（精确）: 全部失败"+" ("+str(dl)+"~"+str(upper)+")")
    return -1

gargFast = [0,0.309,0.618,0.927,1.236,1.545,1.854,2.163,2.472,2.781,3.09,3.399,3.708,4.016,4.325,4.634,4.943,5.252,5.561,5.87,6.179,6.488,6.797,7.106,7.415,7.724,8.033,8.342,8.651,8.96,9.269,9.578,9.887,10.196,10.505,10.814,11.123,11.432,11.74,12.049,12.358,12.667,12.976,13.285,13.594,13.896,14.198,14.501,14.803,15.105,15.407,15.709,16.011,16.313,16.615,16.918,17.22,17.522,17.824,18.126,18.435,18.744,19.053,19.362,19.671,19.98,20.289,20.598,20.907,21.216,21.525,21.834,22.143,22.452,22.76,22.96,23.159,23.358,23.557,23.756,23.955,24.154,24.353,24.552,24.751,24.951,25.15,25.349,25.548,25.747,25.953,26.159,26.365,26.571,26.777,26.983,27.189,27.395,27.601,27.807,28.013,28.219,28.425,28.631,28.837,29.043,29.249,29.455,29.661,29.867,30.073,30.279,30.485,30.691,30.897,31.103,31.309,31.515,31.721,31.92,32.119,32.318,32.517,32.716,32.915,33.114,33.314,33.513,33.712,33.911,34.11,34.309,34.508,34.707,34.913,35.119,35.325,35.531,35.737,35.943,36.149,36.355,36.561,36.767,36.973,37.179,37.385,37.591,37.797,38.099,38.401,38.703,39.006,39.308,39.61,39.912,40.214,40.516,40.818,41.12,41.423,41.725,42.027,42.329,42.631,42.933,43.235,43.537,43.84,44.142,44.444,44.746,45.048,45.35,45.652,45.954,46.257,46.559,46.861,47.163,47.465,47.767,48.069,48.371,48.674,48.976,49.278,49.58,49.882,50.184,50.486,50.788,51.091,51.393,51.695,51.997,52.299,52.601,52.903,53.205,53.508,53.81,54.112,54.414,54.716,55.018,55.32,55.622,55.925,55.952,55.979,56.007,56.034,56.062,56.089,56.117,56.144,56.172,56.199,56.227,56.254,56.282,56.309,56.337,56.371,56.405,56.439,56.474,56.508,56.542,56.577,56.611,56.645,56.68,56.714,56.748,56.782,56.817,56.844,56.872,56.899,56.927,56.954,56.982,57.009,57.036,57.064,57.091,57.119,57.146,57.174,57.201,57.229,57.263,57.297,57.332,57.366,57.4,57.435,57.469,57.503,57.537,57.572,57.606,57.64,57.675,57.709,57.743,57.771,57.798,57.826,57.853,57.881,57.908,57.936,57.963,57.99,58.018,58.045,58.073,58.1,58.128,58.155,58.272,58.389,58.505,58.622,58.739,58.855,58.972,59.089,59.206,59.322,59.439,59.556,59.672,59.789,59.906,60.022,60.139,60.256,60.373,60.489,60.606,60.723,60.839,60.956,61.073,61.189,61.306,61.423,61.54,61.656,61.773,61.89,62.006,62.123,62.24,62.356,62.473,62.59,62.707,62.823,62.94,63.057,63.173,63.29,63.407,63.523,63.64,63.757,63.874,63.99,64.107,64.224,64.34,64.457,64.574,64.69,64.807,64.924,65.041,65.157,65.274,65.391,65.507,65.624,65.741,65.857,65.974,66.091,66.208,66.324,66.441,66.558,66.674,66.791,66.956,67.121,67.285,67.45,67.615,67.78,67.945,68.109,68.274,68.439,68.604,68.769,68.933,69.098,69.263,69.428,69.593,69.757,69.922,70.087,70.252,70.417,70.581,70.746,70.911,71.076,71.24,71.405,71.57,71.735,71.9,72.064,72.229,72.394,72.559,72.724,72.888,73.053,73.218,73.383,73.548,73.712,73.877,74.042,74.207,74.372,74.536,74.701,74.866,75.031,75.196,75.36,75.525,75.69,75.855,76.02,76.184,76.349,76.514,76.679,76.844,77.008,77.173,77.338,77.503,77.667,77.832,77.997,78.162,78.327,78.491,78.656,78.821,78.986,79.151,79.515,79.878,80.242,80.606,80.97,81.334,81.698,82.062,82.426,82.79,83.153,83.517,83.881,84.245,84.609,84.98,85.351,85.721,86.092,86.463,86.834,87.205,87.575,87.946,88.317,88.688,89.058,89.429,89.8,90.171,90.542,90.912,91.283,91.654,92.025,92.396,92.766,93.137,93.508,93.879,94.25,94.62,94.991,95.362,95.733,96.103,96.474,96.845,97.216,97.587,97.957,98.328,98.699,99.07,99.441,99.811,100.182,100.553,100.924,101.294,101.665,102.036,102.407,102.778,103.148,103.519,103.89,104.261,104.632,105.002,105.373,105.744,106.115,106.486,106.794,107.103,107.412,107.721,108.03,108.339,108.648,108.957,109.266,109.575,109.884,110.193,110.502,110.811,111.12,111.422,111.724,112.026,112.328,112.631,112.933,113.235,113.537,113.839,114.141,114.443,114.745,115.048,115.35,115.652,115.961,116.27,116.579,116.888,117.197,117.506,117.815,118.123,118.432,118.741,119.05,119.359,119.668,119.977,120.286,120.595,120.904,121.213,121.522,121.831,122.14,122.449,122.758,123.067,123.376,123.685,123.994,124.303,124.612,124.893,124.932,124.932,124.932,124.932,124.932,124.966,124.966,124.966,124.966,124.966,124.966,124.966,124.966,125.003,125.003,125.003,125.003,125.003,125.003,125.003,125.003,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.06,125.07,125.097,125.124,125.152,125.179,125.207,125.234,125.261,125.289,125.316,125.344,125.371,125.398,125.426,125.453,125.481,125.508,125.535,125.563,125.59,125.618,125.645,125.672,125.7,125.727,125.755,125.768,125.782,125.796,125.81,125.823,125.837,125.851,125.865,125.878,125.892,125.906,125.919,125.933,125.947,125.961,125.988,126.015,126.043,126.07,126.098,126.125,126.152,126.18,126.207,126.235,126.262,126.289,126.317,126.344,126.372,126.399,126.427,126.454,126.481,126.509,126.536,126.564,126.591,126.618,126.646,126.673,126.701,126.728,127.029,127.338,127.647,127.955,128.264,128.573,128.882,129.191,129.5,129.809,130.118,130.427,130.736,131.044,131.353,131.662,131.971,132.28,132.589,132.898,133.207,133.516,133.825,134.133,134.442,134.751,135.06,135.369,135.678,135.987,136.296,136.605,136.914,137.222,137.531,137.84,138.149,138.458,138.767,139.076,139.385,139.694,140.003,140.311,140.62,140.922,141.224,141.526,141.829,142.131,142.433,142.735,143.037,143.339,143.641,143.943,144.245,144.547,144.849,145.151,145.46,145.769,146.078,146.387,146.696,147.005,147.314,147.622,147.931,148.24,148.549,148.858,149.167,149.476,149.785,149.984,150.183,150.382,150.581,150.78,150.979,151.178,151.378,151.577,151.776,151.975,152.174,152.373,152.572,152.771,152.977,153.183,153.389,153.595,153.801,154.007,154.213,154.419,154.625,154.831,155.036,155.242,155.448,155.654,155.86,156.066,156.272,156.478,156.684,156.89,157.096,157.302,157.508,157.714,157.919,158.125,158.331,158.537,158.743,158.942,159.141,159.341,159.54,159.739,159.938,160.137,160.336,160.535,160.734,160.933,161.132,161.331,161.531,161.73,161.936,162.142,162.347,162.553,162.759,162.965,163.171,163.377,163.583,163.789,163.995,164.201,164.407,164.613,164.819,165.121,165.423,165.725,166.027,166.329,166.631,166.933,167.235,167.537,167.839,168.141,168.443,168.745,169.048,169.35,169.652,169.954,170.256,170.558,170.86,171.162,171.464,171.766,172.068,172.37,172.672,172.974,173.276,173.578,173.881,174.183,174.485,174.787,175.089,175.391,175.693,175.995,176.297,176.599,176.901,177.203,177.505,177.807,178.109,178.411,178.714,179.016,179.318,179.62,179.922,180.224,180.526,180.828,181.13,181.432,181.734,182.036,182.338,182.64,182.942,182.97,182.997,183.025,183.052,183.08,183.107,183.135,183.162,183.19,183.217,183.245,183.272,183.299,183.327,183.361,183.396,183.43,183.464,183.498,183.533,183.567,183.601,183.636,183.67,183.704,183.739,183.773,183.807,183.841,183.869,183.896,183.924,183.951,183.979,184.006,184.034,184.061,184.089,184.116,184.144,184.171,184.199,184.226,184.253,184.288,184.322,184.356,184.391,184.425,184.459,184.494,184.528,184.562,184.596,184.631,184.665,184.699,184.734,184.768,184.795,184.823,184.85,184.878,184.905,184.933,184.96,184.988,185.015,185.043,185.07,185.098,185.125,185.153,185.18,185.297,185.413,185.53,185.647,185.763,185.88,185.997,186.114,186.23,186.347,186.464,186.58,186.697,186.814,186.93,187.047,187.164,187.281,187.397,187.514,187.631,187.747,187.864,187.981,188.097,188.214,188.331,188.448,188.564,188.681,188.798,188.914,189.031,189.148,189.264,189.381,189.498,189.615,189.731,189.848,189.965,190.081,190.198,190.315,190.431,190.548,190.665,190.782,190.898,191.015,191.132,191.248,191.365,191.482,191.598,191.715,191.832,191.949,192.065,192.182,192.299,192.415,192.532,192.649,192.765,192.882,192.999,193.116,193.232,193.349,193.466,193.582,193.699,193.816,193.98,194.145,194.31,194.475,194.639,194.804,194.969,195.134,195.298,195.463,195.628,195.793,195.957,196.122,196.287,196.451,196.616,196.781,196.946,197.11,197.275,197.44,197.605,197.769,197.934,198.099,198.264,198.428,198.593,198.758,198.922,199.087,199.252,199.417,199.581,199.746,199.911,200.076,200.24,200.405,200.57,200.735,200.899,201.064,201.229,201.393,201.558,201.723,201.888,202.052,202.217,202.382,202.547,202.711,202.876,203.041,203.206,203.37,203.535,203.7,203.865,204.029,204.194,204.359,204.523,204.688,204.853,205.018,205.182,205.347,205.512,205.677,205.841,206.006,206.171,206.535,206.898,207.262,207.626,207.99,208.354,208.718,209.081,209.445,209.809,210.173,210.537,210.901,211.264,211.635,212.006,212.376,212.747,213.118,213.488,213.859,214.23,214.6,214.971,215.342,215.712,216.083,216.454,216.824,217.195,217.566,217.936,218.307,218.678,219.048,219.419,219.79,220.16,220.531,220.902,221.272,221.643,222.014,222.384,222.755,223.126,223.496,223.867,224.238,224.608,224.979,225.35,225.72,226.091,226.462,226.832,227.203,227.574,227.944,228.315,228.686,229.056,229.427,229.798,230.168,230.539,230.91,231.28,231.651,232.022,232.392,232.763,233.134,233.504,233.813,234.122,234.431,234.74,235.049,235.358,235.667,235.976,236.284,236.593,236.902,237.211,237.52,237.829,238.138,238.44,238.742,239.044,239.346,239.648,239.95,240.252,240.554,240.856,241.159,241.461,241.763,242.065,242.367,242.669,242.978,243.287,243.596,243.904,244.213,244.522,244.831,245.14,245.449,245.758,246.067,246.376,246.685,246.993,247.302,247.611,247.92,248.229,248.538,248.847,249.156,249.465,249.773,250.082,250.391,250.7,251.009,251.318,251.627,251.627,251.777,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.085,252.113,252.14,252.168,252.195,252.222,252.25,252.277,252.305,252.332,252.359,252.387,252.414,252.442,252.469,252.496,252.524,252.551,252.579,252.606,252.633,252.661,252.688,252.716,252.743,252.771,252.798,252.825,252.853,252.88,252.908,252.921,252.935,252.949,252.962,252.976,252.99,253.004,253.017,253.031,253.045,253.059,253.072,253.086,253.1,253.114,253.141,253.168,253.196,253.223,253.251,253.278,253.305,253.333,253.36,253.388,253.415,253.442,253.47,253.497,253.525,253.552,253.579,253.607,253.634,253.662,253.689,253.716,253.744,253.771,253.799,253.826,253.853,253.881,254.085,254.394,254.703,255.012,255.32,255.629,255.938,256.247,256.556,256.865,257.174,257.483,257.792,258.101,258.409,258.718,259.027,259.336,259.645,259.954,260.263,260.572,260.881,261.19,261.498,261.807,262.116,262.425,262.734,263.043,263.352,263.661,263.97,264.279,264.587,264.896,265.205,265.514,265.823,266.132,266.441,266.75,267.059,267.368,267.67,267.972,268.274,268.576,268.878,269.18,269.482,269.784,270.086,270.388,270.69,270.992,271.294,271.596,271.898,272.207,272.516,272.825,273.134,273.443,273.752,274.061,274.37,274.679,274.987,275.296,275.605,275.914,276.223,276.532,276.731,276.937,277.135,277.334,277.533,277.731,277.93,278.129,278.328,278.526,278.725,278.924,279.123,279.321,279.525,279.731,279.937,280.143,280.349,280.555,280.761,280.967,281.173,281.379,281.585,281.791,281.996,282.202,282.408,282.614,282.82,283.026,283.232,283.438,283.644,283.85,284.056,284.262,284.468,284.674,284.88,285.085,285.291,285.497,285.696,285.896,286.095,286.294,286.493,286.692,286.891,287.09,287.289,287.488,287.687,287.886,288.086,288.285,288.484,288.69,288.896,289.102,289.307,289.513,289.719,289.925,290.131,290.337,290.543,290.749,290.955,291.161,291.367,291.573,291.875,292.177,292.479,292.781,293.083,293.385,293.687,293.989,294.291,294.593,294.895,295.198,295.5,295.802,296.104,296.406,296.708,297.01,297.312,297.614,297.916,298.218,298.52,298.822,299.124,299.426,299.728,300.031,300.333,300.635,300.937,301.239,301.541,301.843,302.145,302.447,302.749,303.051,303.353,303.655,303.957,304.259,304.561,304.864,305.166,305.468,305.77,306.072,306.374,306.676,306.978,307.28,307.582,307.884,308.186,308.488,308.79,309.092,309.394,309.437,309.739,310.041,310.068,310.095,310.123,310.15,310.178,310.205,310.232,310.26,310.287,310.315,310.342,310.369,310.397,310.424,310.452,310.486,310.52,310.554,310.589,310.623,310.657,310.691,310.726,310.76,310.794,310.828,310.862,310.897,310.931,310.965,310.993,311.02,311.047,311.075,311.102,311.13,311.157,311.184,311.212,311.239,311.267,311.294,311.321,311.349,311.376,311.411,311.445,311.479,311.513,311.547,311.582,311.616,311.65,311.684,311.719,311.753,311.787,311.821,311.856,311.89,311.917,311.945,311.972,312,312.027,312.054,312.082,312.109,312.137,312.164,312.191,312.219,312.246,312.274,312.39,312.507,312.623,312.74,312.856,312.973,313.089,313.206,313.322,313.439,313.555,313.672,313.788,313.905,314.021,314.138,314.254,314.371,314.487,314.604,314.72,314.837,314.953,315.07,315.186,315.303,315.419,315.536,315.653,315.769,315.886,316.002,316.119,316.235,316.352,316.468,316.585,316.701,316.818,316.934,317.051,317.167,317.284,317.4,317.517,317.633,317.75,317.866,317.983,318.099,318.216,318.332,318.449,318.565,318.682,318.798,318.915,319.031,319.148,319.265,319.381,319.498,319.614,319.731,319.847,319.964,320.08,320.197,320.313,320.43,320.546,320.663,320.779,320.896,321.012,321.177,321.341,321.506,321.67,321.835,321.999,322.164,322.328,322.493,322.657,322.822,322.986,323.151,323.315,323.48,323.644,323.809,323.973,324.138,324.302,324.467,324.631,324.796,324.96,325.125,325.289,325.453,325.618,325.782,325.947,326.111,326.276,326.44,326.605,326.769,326.934,327.098,327.263,327.427,327.592,327.756,327.921,328.085,328.25,328.414,328.579,328.743,328.908,329.072,329.237,329.401,329.566,329.73,329.895,330.059,330.224,330.388,330.553,330.717,330.882,331.046,331.211,331.375,331.54,331.704,331.869,332.033,332.198,332.362,332.527,332.691,332.856,333.213,333.577,333.941,334.305,334.669,335.032,335.396,335.76,336.124,336.488,336.852,337.215,337.579,337.943,338.314,338.684,339.055,339.426,339.796,340.167,340.538,340.908,341.279,341.65,342.02,342.391,342.762,343.132,343.503,343.874,344.244,344.615,344.986,345.356,345.727,346.098,346.468,346.839,347.21,347.58,347.951,348.322,348.692,349.063,349.434,349.804,350.175,350.546,350.916,351.287,351.658,352.028,352.399,352.77,353.14,353.511,353.882,354.252,354.623,354.994,355.364,355.735,356.106,356.476,356.847,357.218,357.588,357.959,358.33,358.7,359.071,359.442,359.812,360.183,360.492,360.801,361.11,361.419,361.727,362.036,362.345,362.654,362.963,363.272,363.581,363.89,364.199,364.508,364.816,365.118,365.421,365.723,366.025,366.327,366.629,366.931,367.233,367.535,367.837,368.139,368.441,368.743,369.045,369.347,369.656,369.965,370.274,370.583,370.891,371.2,371.509,371.818,372.127,372.436,372.745,373.054,373.363,373.672,373.98,374.289,374.598,374.907,375.216,375.525,375.834,376.143,376.452,376.761,377.069,377.378,377.687,377.996,378.305,378.314,378.623,378.931,378.931,378.931,378.931,378.931,378.931,378.931,378.931,378.931,378.931,378.931,378.931,378.931,378.931,378.931,378.931,378.931,378.931,378.931,378.931,378.931,378.931,378.931,378.931,378.931,378.931,379.042,379.042,379.042,379.042,379.042,379.042,379.042,379.042,379.042,379.042,379.042,379.042,379.042,379.042,379.042,379.042,379.042,379.042,379.042,379.042,379.042,379.042,379.042,379.042,379.042,379.042,379.042,379.042,379.042,379.042,379.042,379.042,379.042,379.042,379.042,379.042,379.042,379.042,379.042,379.042,379.042,379.042,379.042,379.042,379.042,379.042,379.042,379.042,379.042,379.042,379.042,379.042,379.042,379.042,379.068,379.096,379.123,379.15,379.178,379.205,379.233,379.26,379.288,379.315,379.342,379.37,379.397,379.425,379.452,379.479,379.507,379.534,379.562,379.589,379.616,379.644,379.671,379.699,379.726,379.753,379.767,379.781,379.794,379.808,379.822,379.836,379.849,379.863,379.877,379.89,379.904,379.918,379.932,379.945,379.959,379.986,380.014,380.041,380.069,380.096,380.123,380.151,380.178,380.206,380.233,380.26,380.288,380.315,380.343,380.37,380.397,380.425,380.452,380.48,380.507,380.534,380.562,380.589,380.617,380.644,380.671,380.699,380.749,381.058,381.367,381.676,381.985,382.294,382.603,382.912,383.22,383.529,383.838,384.147,384.456,384.765,385.074,385.383,385.692,386.001,386.309,386.618,386.927,387.236,387.545,387.854,388.163,388.472,388.781,389.09,389.398,389.707,390.016,390.325,390.634,390.943,391.252,391.561,391.87,392.179,392.487,392.796,393.105,393.414,393.723,394.032,394.334,394.636,394.938,395.24,395.542,395.844,396.146,396.448,396.75,397.052,397.354,397.656,397.958,398.26,398.569,398.878,399.187,399.496,399.805,400.114,400.423,400.732,401.04,401.349,401.658,401.967,402.276,402.585,402.894,403.093,403.292,403.491,403.781,403.98,404.179,404.378,404.577,404.775,404.974,405.173,405.372,405.57,405.769,405.968,406.167,406.365,406.564,406.763,406.968,407.174,407.38,407.585,407.791,407.996,408.202,408.408,408.613,408.819,409.024,409.23,409.436,409.641,409.847,410.052,410.258,410.464,410.669,410.875,411.08,411.286,411.492,411.697,411.903,412.108,412.314,412.52,412.725,412.931,413.13,413.328,413.527,413.726,413.925,414.123,414.322,414.521,414.72,414.918,415.117,415.316,415.515,415.713,415.912,416.118,416.323,416.529,416.735,416.94,417.146,417.351,417.557,417.763,417.968,418.18,418.482,418.784,419.086,419.389,419.691,419.993,420.295,420.597,420.899]
gargSlow = [0,0.192,0.384,0.576,0.768,0.96,1.152,1.345,1.537,1.729,1.921,2.113,2.305,2.497,2.689,2.881,3.073,3.265,3.457,3.649,3.842,4.034,4.226,4.418,4.61,4.802,4.994,5.186,5.378,5.57,5.762,5.954,6.146,6.339,6.531,6.723,6.915,7.107,7.299,7.491,7.683,7.875,8.067,8.259,8.451,8.643,8.836,9.028,9.22,9.412,9.604,9.796,9.988,10.18,10.372,10.564,10.756,10.948,11.141,11.333,11.525,11.717,11.909,12.101,12.293,12.485,12.677,12.869,13.061,13.253,13.445,13.638,13.825,14.013,14.201,14.389,14.577,14.764,14.952,15.14,15.328,15.516,15.703,15.891,16.079,16.267,16.455,16.642,16.83,17.018,17.206,17.394,17.581,17.769,17.957,18.145,18.337,18.529,18.721,18.913,19.105,19.297,19.489,19.681,19.874,20.066,20.258,20.45,20.642,20.834,21.026,21.218,21.41,21.602,21.794,21.986,22.178,22.371,22.563,22.755,22.878,23.002,23.126,23.25,23.374,23.497,23.621,23.745,23.869,23.992,24.116,24.24,24.364,24.488,24.611,24.735,24.859,24.983,25.107,25.23,25.354,25.478,25.602,25.725,25.853,25.982,26.11,26.238,26.366,26.494,26.622,26.75,26.878,27.006,27.134,27.262,27.39,27.518,27.646,27.774,27.902,28.03,28.158,28.286,28.414,28.543,28.671,28.799,28.927,29.055,29.183,29.311,29.439,29.567,29.695,29.823,29.951,30.079,30.207,30.335,30.463,30.591,30.719,30.847,30.976,31.104,31.232,31.36,31.488,31.616,31.744,31.872,31.996,32.119,32.243,32.367,32.491,32.615,32.738,32.862,32.986,33.11,33.233,33.357,33.481,33.605,33.729,33.852,33.976,34.1,34.224,34.347,34.471,34.595,34.719,34.843,34.971,35.099,35.227,35.355,35.483,35.611,35.739,35.867,35.995,36.123,36.251,36.379,36.507,36.635,36.763,36.891,37.019,37.148,37.276,37.404,37.532,37.66,37.788,37.916,38.104,38.291,38.479,38.667,38.855,39.043,39.23,39.418,39.606,39.794,39.982,40.169,40.357,40.545,40.733,40.921,41.109,41.296,41.484,41.672,41.86,42.048,42.235,42.423,42.611,42.799,42.987,43.174,43.362,43.55,43.738,43.926,44.113,44.301,44.489,44.677,44.865,45.052,45.24,45.428,45.616,45.804,45.991,46.179,46.367,46.555,46.743,46.93,47.118,47.306,47.494,47.682,47.87,48.057,48.245,48.433,48.621,48.809,48.996,49.184,49.372,49.56,49.748,49.935,50.123,50.311,50.499,50.687,50.874,51.062,51.25,51.438,51.626,51.813,52.001,52.189,52.377,52.565,52.752,52.94,53.128,53.316,53.504,53.691,53.879,54.067,54.255,54.443,54.63,54.818,55.006,55.194,55.382,55.57,55.757,55.774,55.792,55.809,55.826,55.843,55.86,55.877,55.894,55.911,55.928,55.945,55.962,55.979,55.997,56.014,56.031,56.048,56.065,56.082,56.099,56.116,56.133,56.15,56.167,56.189,56.21,56.232,56.253,56.274,56.296,56.317,56.338,56.36,56.381,56.402,56.424,56.445,56.467,56.488,56.509,56.531,56.552,56.573,56.595,56.616,56.637,56.659,56.68,56.697,56.714,56.731,56.749,56.766,56.783,56.8,56.817,56.834,56.851,56.868,56.885,56.902,56.919,56.937,56.954,56.971,56.988,57.005,57.022,57.039,57.056,57.073,57.09,57.112,57.133,57.154,57.176,57.197,57.219,57.24,57.261,57.283,57.304,57.325,57.347,57.368,57.389,57.411,57.432,57.453,57.475,57.496,57.518,57.539,57.56,57.582,57.603,57.62,57.637,57.654,57.671,57.688,57.706,57.723,57.74,57.757,57.774,57.791,57.808,57.825,57.842,57.859,57.876,57.894,57.911,57.928,57.945,57.962,57.979,57.996,58.013,58.086,58.158,58.231,58.303,58.376,58.449,58.521,58.594,58.666,58.739,58.811,58.884,58.957,59.029,59.102,59.174,59.247,59.319,59.392,59.465,59.537,59.61,59.682,59.755,59.827,59.9,59.973,60.045,60.118,60.19,60.263,60.335,60.408,60.481,60.553,60.626,60.698,60.771,60.843,60.916,60.989,61.061,61.134,61.206,61.279,61.351,61.424,61.497,61.569,61.642,61.714,61.787,61.859,61.932,62.005,62.077,62.15,62.222,62.295,62.367,62.44,62.513,62.585,62.658,62.73,62.803,62.875,62.948,63.021,63.093,63.166,63.238,63.311,63.383,63.456,63.529,63.601,63.674,63.746,63.819,63.891,63.964,64.037,64.109,64.182,64.254,64.327,64.399,64.472,64.545,64.617,64.69,64.762,64.835,64.907,64.98,65.053,65.125,65.198,65.27,65.343,65.415,65.488,65.561,65.633,65.706,65.778,65.851,65.923,65.996,66.069,66.141,66.214,66.286,66.359,66.431,66.504,66.577,66.649,66.722,66.824,66.927,67.029,67.131,67.234,67.336,67.439,67.541,67.643,67.746,67.848,67.951,68.053,68.156,68.258,68.36,68.463,68.565,68.668,68.77,68.872,68.975,69.077,69.18,69.282,69.385,69.487,69.589,69.692,69.794,69.897,69.999,70.101,70.204,70.306,70.409,70.511,70.614,70.716,70.818,70.921,71.023,71.126,71.228,71.33,71.433,71.535,71.638,71.74,71.843,71.945,72.047,72.15,72.252,72.355,72.457,72.559,72.662,72.764,72.867,72.969,73.072,73.174,73.276,73.379,73.481,73.584,73.686,73.788,73.891,73.993,74.096,74.198,74.301,74.403,74.505,74.608,74.71,74.813,74.915,75.017,75.12,75.222,75.325,75.427,75.53,75.632,75.734,75.837,75.939,76.042,76.144,76.246,76.349,76.451,76.554,76.656,76.759,76.861,76.963,77.066,77.168,77.271,77.373,77.475,77.578,77.68,77.783,77.885,77.988,78.09,78.192,78.295,78.397,78.5,78.602,78.704,78.807,78.909,79.135,79.362,79.588,79.814,80.04,80.266,80.493,80.719,80.945,81.171,81.397,81.624,81.85,82.076,82.302,82.528,82.755,82.981,83.207,83.433,83.659,83.886,84.112,84.338,84.568,84.799,85.029,85.26,85.49,85.721,85.951,86.182,86.412,86.643,86.873,87.104,87.334,87.565,87.795,88.026,88.256,88.486,88.717,88.947,89.178,89.408,89.639,89.869,90.1,90.33,90.561,90.791,91.022,91.252,91.483,91.713,91.943,92.174,92.404,92.635,92.865,93.096,93.326,93.557,93.787,94.018,94.248,94.479,94.709,94.94,95.17,95.401,95.631,95.861,96.092,96.322,96.553,96.783,97.014,97.244,97.475,97.705,97.936,98.166,98.397,98.627,98.858,99.088,99.318,99.549,99.779,100.01,100.24,100.471,100.701,100.932,101.162,101.393,101.623,101.854,102.084,102.315,102.545,102.776,103.006,103.236,103.467,103.697,103.928,104.158,104.389,104.619,104.85,105.08,105.311,105.541,105.772,106.002,106.233,106.463,106.655,106.847,107.039,107.231,107.423,107.615,107.808,108,108.192,108.384,108.576,108.768,108.96,109.152,109.344,109.536,109.728,109.92,110.112,110.305,110.497,110.689,110.881,111.073,111.261,111.448,111.636,111.824,112.012,112.2,112.388,112.575,112.763,112.951,113.139,113.327,113.514,113.702,113.89,114.078,114.266,114.453,114.641,114.829,115.017,115.205,115.392,115.58,115.772,115.964,116.156,116.349,116.541,116.733,116.925,117.117,117.309,117.501,117.693,117.885,118.077,118.269,118.461,118.653,118.846,119.038,119.23,119.422,119.614,119.806,119.998,120.19,120.382,120.574,120.766,120.958,121.15,121.343,121.535,121.727,121.919,122.111,122.303,122.495,122.687,122.879,123.071,123.263,123.455,123.647,123.84,124.032,124.224,124.416,124.542,124.542,124.542,124.542,124.542,124.542,124.542,124.542,124.542,124.542,124.542,124.542,124.542,124.542,124.542,124.542,124.542,124.542,124.542,124.542,124.542,124.542,124.542,124.542,124.542,124.542,124.542,124.542,124.548,124.548,124.548,124.548,124.548,124.548,124.548,124.548,124.548,124.548,124.548,124.548,124.548,124.548,124.548,124.548,124.548,124.548,124.548,124.548,124.548,124.548,124.548,124.548,124.548,124.548,124.548,124.548,124.548,124.548,124.548,124.548,124.548,124.548,124.548,124.548,124.548,124.548,124.548,124.548,124.548,124.548,124.548,124.553,124.553,124.553,124.553,124.553,124.553,124.553,124.553,124.553,124.553,124.553,124.553,124.553,124.553,124.553,124.553,124.553,124.553,124.553,124.553,124.553,124.553,124.553,124.553,124.553,124.553,124.553,124.553,124.553,124.553,124.553,124.553,124.553,124.553,124.553,124.553,124.553,124.553,124.553,124.553,124.553,124.553,124.553,124.57,124.587,124.605,124.608,124.608,124.608,124.608,124.625,124.642,124.659,124.676,124.693,124.71,124.727,124.745,124.762,124.779,124.796,124.813,124.83,124.847,124.864,124.881,124.898,124.915,124.933,124.95,124.967,124.984,125.001,125.018,125.035,125.052,125.069,125.086,125.103,125.121,125.138,125.155,125.172,125.189,125.206,125.223,125.24,125.257,125.274,125.291,125.309,125.326,125.343,125.36,125.377,125.394,125.411,125.428,125.437,125.445,125.454,125.462,125.471,125.479,125.488,125.497,125.505,125.514,125.522,125.531,125.539,125.548,125.556,125.565,125.573,125.582,125.591,125.599,125.608,125.616,125.625,125.633,125.65,125.667,125.685,125.702,125.719,125.736,125.753,125.77,125.787,125.804,125.821,125.838,125.855,125.872,125.89,125.907,125.924,125.941,125.958,125.975,125.992,126.009,126.026,126.043,126.06,126.078,126.095,126.112,126.129,126.146,126.163,126.18,126.197,126.214,126.231,126.248,126.266,126.283,126.3,126.317,126.334,126.351,126.368,126.385,126.402,126.419,126.436,126.454,126.646,126.838,127.03,127.222,127.414,127.606,127.798,127.99,128.182,128.374,128.566,128.758,128.951,129.143,129.335,129.527,129.719,129.911,130.103,130.295,130.487,130.679,130.871,131.063,131.255,131.448,131.64,131.832,132.024,132.216,132.408,132.6,132.792,132.984,133.176,133.368,133.56,133.753,133.945,134.137,134.329,134.521,134.713,134.905,135.097,135.289,135.481,135.673,135.865,136.057,136.25,136.442,136.634,136.826,137.018,137.21,137.402,137.594,137.786,137.978,138.17,138.362,138.554,138.747,138.939,139.131,139.323,139.515,139.707,139.899,140.091,140.279,140.467,140.654,140.842,141.03,141.218,141.406,141.594,141.781,141.969,142.157,142.345,142.533,142.72,142.908,143.096,143.284,143.472,143.659,143.847,144.035,144.223,144.411,144.598,144.79,144.983,145.175,145.367,145.559,145.751,145.943,146.135,146.327,146.519,146.711,146.903,147.095,147.287,147.48,147.672,147.864,148.056,148.248,148.44,148.632,148.824,149.016,149.208,149.332,149.456,149.58,149.703,149.827,149.951,150.075,150.198,150.322,150.446,150.57,150.694,150.817,150.941,151.065,151.189,151.312,151.436,151.56,151.684,151.808,151.931,152.055,152.179,152.307,152.435,152.563,152.691,152.819,152.947,153.075,153.203,153.331,153.459,153.588,153.716,153.844,153.972,154.1,154.228,154.356,154.484,154.612,154.74,154.868,154.996,155.124,155.252,155.38,155.508,155.636,155.764,155.892,156.021,156.149,156.277,156.405,156.533,156.661,156.789,156.917,157.045,157.173,157.301,157.429,157.557,157.685,157.813,157.941,158.069,158.197,158.325,158.449,158.573,158.697,158.821,158.944,159.068,159.192,159.316,159.439,159.563,159.687,159.811,159.935,160.058,160.182,160.306,160.43,160.553,160.677,160.801,160.925,161.049,161.172,161.296,161.424,161.552,161.68,161.808,161.936,162.064,162.193,162.321,162.449,162.577,162.705,162.833,162.961,163.089,163.217,163.345,163.473,163.601,163.729,163.857,163.985,164.113,164.241,164.369,164.557,164.745,164.933,165.121,165.308,165.496,165.684,165.872,166.06,166.247,166.435,166.623,166.811,166.999,167.186,167.374,167.562,167.75,167.938,168.125,168.313,168.501,168.689,168.877,169.065,169.252,169.44,169.628,169.816,170.004,170.191,170.379,170.567,170.755,170.943,171.13,171.318,171.506,171.694,171.882,172.069,172.257,172.445,172.633,172.821,173.008,173.196,173.384,173.572,173.76,173.947,174.135,174.323,174.511,174.699,174.886,175.074,175.262,175.45,175.638,175.826,176.013,176.201,176.389,176.577,176.765,176.952,177.14,177.328,177.516,177.704,177.891,178.079,178.267,178.455,178.643,178.83,179.018,179.206,179.394,179.582,179.769,179.957,180.145,180.333,180.521,180.708,180.896,181.084,181.272,181.46,181.647,181.835,182.023,182.211,182.228,182.245,182.262,182.279,182.296,182.313,182.331,182.348,182.365,182.382,182.399,182.416,182.433,182.45,182.467,182.484,182.501,182.518,182.536,182.553,182.57,182.587,182.604,182.621,182.642,182.664,182.685,182.706,182.728,182.749,182.771,182.792,182.813,182.835,182.856,182.877,182.899,182.92,182.941,182.963,182.984,183.006,183.027,183.048,183.07,183.091,183.112,183.134,183.151,183.168,183.185,183.202,183.219,183.236,183.253,183.27,183.288,183.305,183.322,183.339,183.356,183.373,183.39,183.407,183.424,183.441,183.458,183.476,183.493,183.51,183.527,183.544,183.565,183.587,183.608,183.629,183.651,183.672,183.693,183.715,183.736,183.758,183.779,183.8,183.822,183.843,183.864,183.886,183.907,183.928,183.95,183.971,183.992,184.014,184.035,184.057,184.074,184.091,184.108,184.125,184.142,184.159,184.176,184.193,184.21,184.227,184.245,184.262,184.279,184.296,184.313,184.33,184.347,184.364,184.381,184.398,184.415,184.433,184.45,184.467,184.539,184.612,184.684,184.757,184.83,184.902,184.975,185.047,185.12,185.192,185.265,185.338,185.41,185.483,185.555,185.628,185.7,185.773,185.846,185.918,185.991,186.063,186.136,186.208,186.281,186.354,186.426,186.499,186.571,186.644,186.716,186.789,186.862,186.934,187.007,187.079,187.152,187.224,187.297,187.37,187.442,187.515,187.587,187.66,187.732,187.805,187.878,187.95,188.023,188.095,188.168,188.24,188.313,188.386,188.458,188.531,188.603,188.676,188.748,188.821,188.894,188.966,189.039,189.111,189.184,189.256,189.329,189.402,189.474,189.547,189.619,189.692,189.764,189.837,189.91,189.982,190.055,190.127,190.2,190.272,190.345,190.418,190.49,190.563,190.635,190.708,190.78,190.853,190.926,190.998,191.071,191.143,191.216,191.288,191.361,191.434,191.506,191.579,191.651,191.724,191.796,191.869,191.942,192.014,192.087,192.159,192.232,192.304,192.377,192.45,192.522,192.595,192.667,192.74,192.812,192.885,192.958,193.03,193.103,193.175,193.278,193.38,193.482,193.585,193.687,193.79,193.892,193.995,194.097,194.199,194.302,194.404,194.507,194.609,194.711,194.814,194.916,195.019,195.121,195.224,195.326,195.428,195.531,195.633,195.736,195.838,195.94,196.043,196.145,196.248,196.35,196.453,196.555,196.657,196.76,196.862,196.965,197.067,197.169,197.272,197.374,197.477,197.579,197.682,197.784,197.886,197.989,198.091,198.194,198.296,198.398,198.501,198.603,198.706,198.808,198.911,199.013,199.115,199.218,199.32,199.423,199.525,199.628,199.73,199.832,199.935,200.037,200.14,200.242,200.344,200.447,200.549,200.652,200.754,200.857,200.959,201.061,201.164,201.266,201.369,201.471,201.573,201.676,201.778,201.881,201.983,202.086,202.188,202.29,202.393,202.495,202.598,202.7,202.802,202.905,203.007,203.11,203.212,203.315,203.417,203.519,203.622,203.724,203.827,203.929,204.031,204.134,204.236,204.339,204.441,204.544,204.646,204.748,204.851,204.953,205.056,205.158,205.26,205.363,205.589,205.815,206.041,206.268,206.494,206.72,206.946,207.172,207.399,207.625,207.851,208.077,208.303,208.53,208.756,208.982,209.208,209.434,209.661,209.887,210.113,210.339,210.565,210.792,211.022,211.253,211.483,211.713,211.944,212.174,212.405,212.635,212.866,213.096,213.327,213.557,213.788,214.018,214.249,214.479,214.71,214.94,215.17,215.401,215.631,215.862,216.092,216.323,216.553,216.784,217.014,217.245,217.475,217.706,217.936,218.167,218.397,218.628,218.858,219.088,219.319,219.549,219.78,220.01,220.241,220.471,220.702,220.932,221.163,221.393,221.624,221.854,222.085,222.315,222.545,222.776,223.006,223.237,223.467,223.698,223.928,224.159,224.389,224.62,224.85,225.081,225.311,225.542,225.772,226.003,226.233,226.463,226.694,226.924,227.155,227.385,227.616,227.846,228.077,228.307,228.538,228.768,228.999,229.229,229.46,229.69,229.92,230.151,230.381,230.612,230.842,231.073,231.303,231.534,231.764,231.995,232.225,232.456,232.686,232.917,233.109,233.301,233.493,233.685,233.877,234.069,234.261,234.453,234.645,234.837,235.029,235.221,235.414,235.606,235.798,235.99,236.182,236.374,236.566,236.758,236.95,237.142,237.334,237.526,237.714,237.902,238.09,238.278,238.465,238.653,238.841,239.029,239.217,239.404,239.592,239.78,239.968,240.156,240.344,240.531,240.719,240.907,241.095,241.283,241.47,241.658,241.846,242.034,242.226,242.418,242.61,242.802,242.994,243.186,243.378,243.57,243.762,243.955,244.147,244.339,244.531,244.723,244.915,245.107,245.299,245.491,245.683,245.875,246.067,246.259,246.452,246.644,246.836,247.028,247.22,247.412,247.604,247.796,247.988,248.18,248.372,248.564,248.756,248.949,249.141,249.333,249.525,249.717,249.909,250.101,250.293,250.485,250.677,250.869,251.046,251.046,251.046,251.046,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.051,251.061,251.061,251.061,251.061,251.061,251.061,251.061,251.061,251.061,251.061,251.061,251.061,251.061,251.061,251.061,251.061,251.061,251.061,251.061,251.061,251.061,251.061,251.061,251.061,251.061,251.061,251.061,251.061,251.061,251.061,251.061,251.061,251.061,251.061,251.061,251.061,251.061,251.061,251.061,251.061,251.061,251.061,251.061,251.061,251.061,251.078,251.096,251.113,251.13,251.147,251.164,251.181,251.198,251.215,251.232,251.249,251.266,251.284,251.301,251.318,251.335,251.352,251.369,251.386,251.403,251.42,251.437,251.454,251.472,251.489,251.506,251.523,251.54,251.557,251.574,251.591,251.608,251.625,251.642,251.66,251.677,251.694,251.711,251.728,251.745,251.762,251.779,251.796,251.813,251.83,251.848,251.865,251.882,251.89,251.899,251.907,251.916,251.924,251.933,251.942,251.95,251.959,251.967,251.976,251.984,251.993,252.001,252.01,252.018,252.027,252.036,252.044,252.053,252.061,252.07,252.078,252.087,252.104,252.121,252.138,252.155,252.172,252.189,252.206,252.224,252.241,252.258,252.275,252.292,252.309,252.326,252.343,252.36,252.377,252.394,252.411,252.429,252.446,252.463,252.48,252.497,252.514,252.531,252.548,252.565,252.582,252.599,252.617,252.634,252.651,252.668,252.685,252.702,252.719,252.736,252.753,252.77,252.787,252.805,252.822,252.839,252.856,252.873,252.89,252.907,253.099,253.291,253.483]


def getGargPos(walkTime):
    fastTime, slowTime = walkTime
    return [int(845 - gargFast[int(fastTime)]), int(854 - gargSlow[int(slowTime)])]

def pos(iT, paoTime):
    iceTime = []
    if not isinstance(iT, list):
        iceTime.append(iT)
    else:
        iceTime = iT
    iceTime.sort()
    for t in iceTime:
        if t <= 0:
            iceTime.remove(t)
        elif t > paoTime:
            raise Exception()
    if len(iceTime) == 0:
        walkTime = [paoTime, paoTime]
    else:
        slowTotal = 0
        fastTotal = 0
        lastTick = -1
        doubleIce = False
        iceTime.append(paoTime)
        for t in iceTime:
            if lastTick == -1:
                slowTotal += t
                fastTotal += t
            else:
                diff = t - lastTick
                if diff <= 2000:
                    slowTotal += max(diff - (600 if not doubleIce else 400), 0) / 2.0
                    fastTotal += max(diff - (400 if not doubleIce else 300), 0) / 2.0
                else:
                    slowTotal += (2000 - (600 if not doubleIce else 400))/2.0 + diff - 2000
                    fastTotal += (2000 - (400 if not doubleIce else 300))/2.0 + diff - 2000
                doubleIce = True if diff <= 2000 else False
            lastTick = t
        walkTime = [int(fastTotal), int(slowTotal)]
    print(getGargPos(walkTime))
    print("""巨人举锤坐标参考：
8普通 - 680
8炮 - 670
7普通 - 600
7炮 - 590
6普通 - 520
6炮 - 510
（高坚果为普通+20，南瓜则再+10）""")
    return getGargPos(walkTime)
    
def walk(wt = None):
    if wt != None:
        walkTime = []
        if not isinstance(wt, list):
            walkTime.append(wt)
        else:
            walkTime = wt
        fast = 845
        slow = 854
        for w in walkTime:
            fast -= gargFast[int(w)]
            slow -= gargSlow[int(w)]
        print([int(fast), int(slow)])
    print("""巨人举锤坐标参考：
8普通 - 680
8炮 - 670
7普通 - 600
7炮 - 590
6普通 - 520
6炮 - 510
（高坚果为普通+20，南瓜则再+10）""")
    if wt != None:
        return [int(fast), int(slow)]
    else:
        return None

print("欢迎使用拦截计算器 by Elovi, Crescendo\n当前场景: PE\n输入helpfull查看帮助。")
print("计算结果默认为【植物激活→炮拦截】的情况。若为【炮激活→炮拦截】，需额外+1；若为【炮激活→植物拦截】，需额外+2。")
scene("PE", True)
iceTime = 0
paoTime = 278
walkTime = [278, 278]
while True:
    print()
    print(">> ", end="")
    line = input()
    try:
        if line == "exit" or line == "quit":
            break
        elif line == "help":
            print("""====================
基础指令：
    DE/PE/RE                - 设置场景
    wave                    - 查看当前波长，并显示巨人坐标范围
    wave [冰时机] [激活时机] - 设置冰时机、激活时机（冰时机可不填）
    hit (炮列数)              - 求正好全伤的落点
    nohit (炮列数)            - 求正好不伤的落点
    hit (炮列数) [延迟]       - 求延迟炮正好全伤的落点
    nohit (炮列数) [延迟]     - 求延迟炮正好不伤的落点
    delay (炮列数) [落点] [拦截行数] - 求最早、最晚拦截（尾炸）时机
        --程序会智能推测行数。默认前院/天台尾炸三行，后院尾炸两行。若不符，可自行输入拦截行数。
        --风炮需指定炮尾所在列

其他：
    help        - 查看帮助
    helpfull    - 查看详细帮助
    version     - 查看版本
    quit/exit   - 退出
====================""")
        elif line == "helpfull":
            print("""====================
基础指令：
    DE/PE/RE                - 设置场景
    wave                    - 查看当前波长，并显示巨人坐标范围
    wave [冰时机] [激活时机] - 设置冰时机、激活时机（冰时机可不填）
    hit (炮列数)              - 求正好全伤的落点（风炮需指定炮尾所在列）
    nohit (炮列数)            - 求正好不伤的落点（风炮需指定炮尾所在列）
    hit (炮列数) [延迟]       - 求延迟炮正好全伤的落点（风炮需指定炮尾所在列）
    nohit (炮列数) [延迟]     - 求延迟炮正好不伤的落点（风炮需指定炮尾所在列）
    delay (炮列数) [落点] [拦截行数] - 求最早、最晚拦截（尾炸）时机
        --程序会智能推测行数。默认前院/天台尾炸三行，后院尾炸两行。若不符，可自行输入拦截行数。
        --风炮需指定炮尾所在列

高级指令：
    doom(r, c) - 表示用r行c列的核弹
    cob(r, c, (paoCol, paoRow))  - 表示发炮落点r行c列
        --屋顶场地需指定炮尾所在列；特殊落点需要指定炮所在行

    delay(xgInfo, rows, explodeInfo, isIced=False, exact=False) - 求最早/最晚拦截时机
        --为简化计算，计算时只考虑最左、最右巨人
        --可以单独使用minDelay或maxDelay；xgInfo接受单数也接受范围
            --例如，minDelay(806, [1, 2, 5, 6], doom(3, 3)) 表示1、2、5、6路原速巨人x坐标806，3-3核武最早何时能尾炸；delay([788, 806], [1, 2, 5, 6], doom(3, 3))则可以求出最早和最晚时机
        --如果认为结果有问题，请尝试将exact设为True（开销较大）；程序会遍历每个坐标的巨人并分别计算

    pos(iceTime, paoTime) - 输入冰时机、激活时机，求巨人坐标范围
        --可以输入多个冰时机，paoTime也可以大于2300。

    walk([walkTime1, walkTime2, ...]) - 输入行走时间，求巨人坐标范围（支持输入多段）
        --巨人举锤/投掷后相位会重置（受冰不会），需分多段输入。

    findMaxDelay(xgInfo, xgRows, dropRow, dropColRange, isIced=False, step=5, paoCol=None) - 求最大可能延迟的拦截落点（开销较大）
        --例如，findMaxDelay([788, 817], [2], 1, [8, 8.5]) 表示2路原速巨人x坐标范围[788~817]，炮落点1路[8~8.5]列，每5个px遍历一次，寻找最大可能延迟的拦截落点。
        --屋顶场地需指定炮尾所在列

原生函数：
    judge(xgInfo, delay, xgRows, explodeInfo, isIced=False, verbosity=1) - 拦截计算
        --例如，judge([788, 817], 107, [1, 2, 5, 6], doom(3, 9)) 表示原速巨人x坐标范围[788~817]，延时107，只考虑1256行巨人，使用3-9核弹，计算是否可以全部拦截。因为可以全部拦截，故输出 True, []。

    iceKill(xgInfo, xgRows, isIced=True, verbosity=1) - 冰杀小鬼计算
        --例如，iceKill([734, 789], [3], True) 表示减速巨人x坐标范围[724~789]，只考虑3路巨人（实际上每一路都一样），计算冰冻全部小鬼的最早时机。
    --judge和iceKill都会给出一个AvgDamege，但这仅为平均值，实际伤害概率分布并不为此，仅可作为参考，不可视为伤害的期望值。

    注意：原生函数需要结合print()使用。

其他：
    help        - 查看帮助
    helpfull    - 查看详细帮助
    version     - 查看版本
    quit/exit   - 退出
====================""")
        elif line in ["DE", "NE", "PE", "FE", "RE", "ME", "de", "ne", "pe", "fe", "re", "me"]:
            scene(line.upper())
        elif line.startswith("wave"):
            params = line.split()
            if len(params) == 1:
                print("当前设置:", "不用冰" if iceTime <= 0 else str(
                    iceTime)+"冰", str(paoTime)+"激活")
                print("巨人坐标范围:", getGargPos(walkTime))
            elif len(params) == 2:
                if int(params[1]) >= 2300:
                    print("意外的输入。激活时机太晚。")
                    continue
                if int(params[1]) <= 0:
                    print("意外的输入。激活时机太早。")
                    continue
                iceTime = 0
                paoTime = int(params[1])
                walkTime = [paoTime, paoTime]
                if paoTime <= 224:
                    print("警告：此时机无法全伤巨人。")
                print("修改完毕。当前设置:", "不用冰" if iceTime <=
                    0 else str(iceTime)+"冰", str(paoTime)+"激活")
                print("巨人坐标范围:", getGargPos(walkTime))
            elif len(params) >= 3:
                if int(params[1]) > 0:
                    if int(params[1]) >= int(params[2]):
                        print("意外的输入。激活时机不能早于冰时机。")
                        continue
                    if int(params[2]) >= 3500:
                        print("意外的输入。激活时机太晚。")
                        continue
                if int(params[2]) <= 0:
                    print("意外的输入。激活时机太早。")
                    continue
                iceTime = int(params[1])
                paoTime = int(params[2])
                if iceTime <= 0:
                    if paoTime <= 224:
                        print("警告：此时机无法全伤巨人。")
                elif iceTime + paoTime < 1049:
                    print("警告：此时机无法全伤巨人。")
                if iceTime <= 0:
                    walkTime = [paoTime, paoTime]
                else:
                    if paoTime <= iceTime + 400:
                        walkTime = [iceTime, iceTime]
                    elif paoTime <= iceTime + 600:
                        walkTime = [iceTime + int((paoTime - 400 - iceTime)/2), iceTime]
                    elif paoTime <= iceTime + 2000:
                        walkTime = [iceTime + int((paoTime - 400 - iceTime)/2), iceTime + int((paoTime - 600 - iceTime)/2)]
                    else:
                        walkTime = [iceTime + 800 + int(paoTime - iceTime - 2000), iceTime + 700 + int(paoTime - iceTime - 2000)]
                print("修改完毕。当前设置:", "不用冰" if iceTime <=
                    0 else str(iceTime)+"冰", str(paoTime)+"激活")
                print("巨人坐标范围:", getGargPos(walkTime))
        elif line.startswith("hit"):
            params = line.split()
            if isRoof:
                if len(params) < 2:
                    print("意外的输入。屋顶场地需要指定炮尾所在列。")
                    continue
                paoCol = int(params[1])
                if paoCol < 1 or paoCol > 8:
                    print("意外的输入。炮尾所在列只能输入1~8。")
                    continue
            if (isRoof and len(params) >= 3) or (not isRoof and len(params) >= 2):
                extra = int(params[2]) if isRoof else int(params[1])
                if extra <= 0:
                    print("意外的输入。延迟必须为正数。")
                    continue
                if extra + paoTime >= 2300:
                    print("意外的输入。延迟太长。")
                    continue
                if iceTime <= 0:
                    delayedWalkTime = [paoTime + extra, paoTime + extra]
                else:
                    delayedWalkTime = [
                        iceTime + int((paoTime + extra - 400 - iceTime)/2), iceTime + int((paoTime + extra - 600 - iceTime)/2)]
                print("延迟炮生效时机:", extra + paoTime)
            else:
                delayedWalkTime = walkTime
            if isRoof:
                dist = windPaoDist[paoCol - 1]
            else:
                dist = [118, 125] if rowHeight == 85 else [111, 125]
            gargPos = getGargPos(delayedWalkTime)
            print("巨人坐标范围:",str(gargPos))
            if not isRoof:
                print("全伤本行&下行:",str(gargPos[1]-dist[1])+" ("+str((gargPos[1]-dist[1])/80.0)+"列)")
                print("全伤三行:", str(gargPos[1]-dist[0])+" ("+str((gargPos[1]-dist[0])/80.0)+"列)")
            else:
                print("全伤上行:", str(gargPos[1]-dist[0])+" ("+str((gargPos[1]-dist[0])/80.0)+"列)")
                print("全伤本行:", str(gargPos[1]-dist[1])+" ("+str((gargPos[1]-dist[1])/80.0)+"列)")
                print("全伤下行:", str(gargPos[1]-dist[2])+" ("+str((gargPos[1]-dist[2])/80.0)+"列)")
        elif line.startswith("nohit"):
            params = line.split()
            if isRoof:
                if len(params) < 2:
                    print("意外的输入。屋顶场地需要指定炮尾所在列。")
                    continue
                paoCol = int(params[1])
                if paoCol < 1 or paoCol > 8:
                    print("意外的输入。炮尾所在列只能输入1~8。")
                    continue
            if (isRoof and len(params) >= 3) or (not isRoof and len(params) >= 2):
                extra = int(params[2]) if isRoof else int(params[1])
                if extra <= 0:
                    print("意外的输入。延迟必须为正数。")
                    continue
                if extra + paoTime >= 2300:
                    print("意外的输入。延迟太长。")
                    continue
                if iceTime <= 0:
                    delayedWalkTime = [paoTime + extra, paoTime + extra]
                else:
                    delayedWalkTime = [iceTime + int((paoTime + extra - 400 - iceTime)/2), iceTime + int((paoTime +extra - 600 - iceTime)/2)]
                print("延迟炮生效时机:", extra + paoTime)
            else:
                delayedWalkTime = walkTime
            if isRoof:
                dist = windPaoDist[paoCol - 1]
            else:
                dist = [118, 125] if rowHeight == 85 else [111, 125]
            gargPos = getGargPos(delayedWalkTime)
            print("巨人坐标范围:",str(gargPos))
            if not isRoof:
                print("不伤伤本行&下行:",str(gargPos[0]-dist[1]-1)+" ("+str((gargPos[0]-dist[1]-1)/80.0)+"列)")
                print("不伤上行:", str(gargPos[0]-dist[0]-1)+" ("+str((gargPos[0]-dist[0]-1)/80.0)+"列)")
            else:
                print("不伤上行:", str(gargPos[0]-dist[0]-1)+" ("+str((gargPos[0]-dist[0]-1)/80.0)+"列)")
                print("不伤本行:", str(gargPos[0]-dist[1]-1)+" ("+str((gargPos[0]-dist[1]-1)/80.0)+"列)")
                print("不伤下行:", str(gargPos[0]-dist[2]-1)+" ("+str((gargPos[0]-dist[2]-1)/80.0)+"列)")
        elif line.startswith("delay "):
            params = line.split()
            paoCol = None
            if isRoof:
                if len(params) <= 2:
                    print("意外的输入。屋顶场地需要指定炮尾所在列。")
                    continue
                paoCol = int(params[1])
                if paoCol < 1 or paoCol > 8:
                    print("意外的输入。炮尾所在列只能输入1~8。")
                    continue
                params.pop(1)
            if len(params) == 1:
                print("意外的输入。需要指定落点。")
                continue
            if len(params) >= 2:
                paoX = float(params[1])
                if paoX < 0 or paoX >= 10:
                    print("意外的输入。落点超出有效范围（0-9列）。")
                    continue
                if len(params) >= 3:
                    rows = int(params[2])
                    if not rows in [2, 3]:
                        print("意外的输入。拦截行数应为2或3。")
                        continue
                else:
                    if not isRoof:
                        rows = 3 if rowHeight == 100 and paoX <= 5 else 2
                    else:
                        if paoX <= 5:
                            rows = 3
                        elif paoCol <= 4:
                            rows = 3
                        else:
                            rows = 2
                isIced = True if iceTime > 0 and paoTime <= iceTime + 2000 else False
                paoRow = 3
                xgRow = [2, 3, 4] if rows == 3 else [3, 4]
                gargPos = getGargPos(walkTime)
                delay(gargPos, xgRow, cob(paoRow, paoX, paoCol), isIced)
        elif line == "version":
            print("BrainVsZombies General Interception Calculator ver 1.1 by Elovi, Crescendo")
        else:
            eval(line)
    except:
        print("意外的输入。输入help查看帮助。")

#pyinstaller -F interception_calculator.py
